{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"","title":"Home"},{"location":"Paso1/","text":"Para este ejercicio es necesario crear una cuenta en github Para crear una cuenta en GitHub, sigue estos pasos: Visita la p\u00e1gina principal de GitHub en https://github.com. Haz clic en el bot\u00f3n \"Sign up\" (registrarse) ubicado en la esquina superior derecha de la p\u00e1gina. Ingresa tu nombre de usuario, direcci\u00f3n de correo electr\u00f3nico y contrase\u00f1a en los campos correspondientes. Tambi\u00e9n puedes registrarte utilizando tu cuenta de Google o tu cuenta de Microsoft. Haz clic en el bot\u00f3n \"Create account\" (crear cuenta). En la siguiente pantalla, se te pedir\u00e1 que elijas un plan de pago. Si solo deseas utilizar las caracter\u00edsticas b\u00e1sicas de GitHub, selecciona \"Free\" (gratuito). Completa el proceso de registro siguiendo las instrucciones en pantalla. Una vez que hayas completado el proceso de registro, se te dirigir\u00e1 a la p\u00e1gina de inicio de GitHub. Desde all\u00ed, puedes comenzar a crear repositorios, colaborar en proyectos existentes y personalizar tu perfil. \u00a1Y eso es todo! Ahora tienes una cuenta de GitHub y puedes comenzar a utilizar esta plataforma para compartir y colaborar en proyectos de software.","title":"Paso 1"},{"location":"Paso1/#para-este-ejercicio-es-necesario-crear-una-cuenta-en-github","text":"","title":"Para este ejercicio es necesario crear una cuenta en github"},{"location":"Paso1/#para-crear-una-cuenta-en-github-sigue-estos-pasos","text":"Visita la p\u00e1gina principal de GitHub en https://github.com. Haz clic en el bot\u00f3n \"Sign up\" (registrarse) ubicado en la esquina superior derecha de la p\u00e1gina. Ingresa tu nombre de usuario, direcci\u00f3n de correo electr\u00f3nico y contrase\u00f1a en los campos correspondientes. Tambi\u00e9n puedes registrarte utilizando tu cuenta de Google o tu cuenta de Microsoft. Haz clic en el bot\u00f3n \"Create account\" (crear cuenta). En la siguiente pantalla, se te pedir\u00e1 que elijas un plan de pago. Si solo deseas utilizar las caracter\u00edsticas b\u00e1sicas de GitHub, selecciona \"Free\" (gratuito). Completa el proceso de registro siguiendo las instrucciones en pantalla. Una vez que hayas completado el proceso de registro, se te dirigir\u00e1 a la p\u00e1gina de inicio de GitHub. Desde all\u00ed, puedes comenzar a crear repositorios, colaborar en proyectos existentes y personalizar tu perfil. \u00a1Y eso es todo! Ahora tienes una cuenta de GitHub y puedes comenzar a utilizar esta plataforma para compartir y colaborar en proyectos de software.","title":"Para crear una cuenta en GitHub, sigue estos pasos:"},{"location":"Paso2/","text":"Creacion de organizacion El Siguiente paso debera ser realizado solo por el Ingeniero Devops Escoge un nombre de organizacion y recopila los nombres de usuarios de github de tus companeros Crea la organizacion siguiendo estos pasos Para crear una organizaci\u00f3n en GitHub y agregar a tus compa\u00f1eros de equipo, sigue estos pasos: Inicia sesi\u00f3n en tu cuenta de GitHub. Haz clic en tu avatar de perfil en la esquina superior derecha de la p\u00e1gina y selecciona \"Your organizations\" (tus organizaciones) en el men\u00fa desplegable. En la p\u00e1gina \"Your organizations\", haz clic en el bot\u00f3n \"New organization\" (nueva organizaci\u00f3n) en la esquina superior derecha de la p\u00e1gina. Ingresa un nombre para tu organizaci\u00f3n, una direcci\u00f3n de correo electr\u00f3nico y una descripci\u00f3n si lo deseas. Luego, selecciona la opci\u00f3n \"Free\" (gratuita) en el men\u00fa desplegable \"Organization billing\" (facturaci\u00f3n de la organizaci\u00f3n). Haz clic en el bot\u00f3n \"Create organization\" (crear organizaci\u00f3n). Una vez creada la organizaci\u00f3n, ser\u00e1s dirigido a la p\u00e1gina de configuraci\u00f3n de la organizaci\u00f3n. Desde all\u00ed, puedes agregar a tus compa\u00f1eros de equipo haciendo clic en el bot\u00f3n \"Invite teams or people\" (invitar equipos o personas). Ingresa los usuarios de github de tu equipo \"Invite members\" (invitar miembros) y haz clic en el bot\u00f3n \"Add\" (agregar). En la p\u00e1gina de invitaci\u00f3n, puedes personalizar el mensaje de invitaci\u00f3n que recibir\u00e1n tus compa\u00f1eros de equipo. Cuando hayas terminado, haz clic en el bot\u00f3n \"Send\" (enviar).","title":"Paso 2"},{"location":"Paso2/#creacion-de-organizacion","text":"El Siguiente paso debera ser realizado solo por el Ingeniero Devops Escoge un nombre de organizacion y recopila los nombres de usuarios de github de tus companeros Crea la organizacion siguiendo estos pasos","title":"Creacion de organizacion"},{"location":"Paso2/#para-crear-una-organizacion-en-github-y-agregar-a-tus-companeros-de-equipo-sigue-estos-pasos","text":"Inicia sesi\u00f3n en tu cuenta de GitHub. Haz clic en tu avatar de perfil en la esquina superior derecha de la p\u00e1gina y selecciona \"Your organizations\" (tus organizaciones) en el men\u00fa desplegable. En la p\u00e1gina \"Your organizations\", haz clic en el bot\u00f3n \"New organization\" (nueva organizaci\u00f3n) en la esquina superior derecha de la p\u00e1gina. Ingresa un nombre para tu organizaci\u00f3n, una direcci\u00f3n de correo electr\u00f3nico y una descripci\u00f3n si lo deseas. Luego, selecciona la opci\u00f3n \"Free\" (gratuita) en el men\u00fa desplegable \"Organization billing\" (facturaci\u00f3n de la organizaci\u00f3n). Haz clic en el bot\u00f3n \"Create organization\" (crear organizaci\u00f3n). Una vez creada la organizaci\u00f3n, ser\u00e1s dirigido a la p\u00e1gina de configuraci\u00f3n de la organizaci\u00f3n. Desde all\u00ed, puedes agregar a tus compa\u00f1eros de equipo haciendo clic en el bot\u00f3n \"Invite teams or people\" (invitar equipos o personas). Ingresa los usuarios de github de tu equipo \"Invite members\" (invitar miembros) y haz clic en el bot\u00f3n \"Add\" (agregar). En la p\u00e1gina de invitaci\u00f3n, puedes personalizar el mensaje de invitaci\u00f3n que recibir\u00e1n tus compa\u00f1eros de equipo. Cuando hayas terminado, haz clic en el bot\u00f3n \"Send\" (enviar).","title":"Para crear una organizaci\u00f3n en GitHub y agregar a tus compa\u00f1eros de equipo, sigue estos pasos:"},{"location":"Paso3/","text":"Creacion de repositorio para el proyecto Como siguiente paso deberas crear un repositorio para el proyecto Para crear un repositorio en tu organizaci\u00f3n de GitHub, sigue estos pasos: Inicia sesi\u00f3n en tu cuenta de GitHub y accede a la p\u00e1gina principal de tu organizaci\u00f3n. Haz clic en la pesta\u00f1a \"Repositories\" (repositorios) en la parte superior de la p\u00e1gina. Haz clic en el bot\u00f3n \"New\" (nuevo) en la esquina superior derecha de la p\u00e1gina. En la p\u00e1gina \"Create a new repository\", ingresa un nombre para el repositorio en el campo \"Repository name\". Opcionalmente, puedes agregar una descripci\u00f3n del repositorio en el campo \"Description\". Selecciona la visibilidad del repositorio: p\u00fablico o privado. Si el repositorio es p\u00fablico, cualquiera puede verlo y clonarlo. Si el repositorio es privado, solo los miembros de la organizaci\u00f3n pueden verlo y clonarlo. En este caso selecciona Privado. Selecciona la opci\u00f3n \"Initialize this repository with a README\" si deseas que se cree un archivo README.md en el repositorio. Haz clic en el bot\u00f3n \"Create repository\" para crear el repositorio. \u00a1Eso es todo! Ahora has creado un nuevo repositorio en tu organizaci\u00f3n de GitHub. Puedes agregar archivos al repositorio, colaborar con otros miembros de la organizaci\u00f3n y administrar el acceso al repositorio a trav\u00e9s de la p\u00e1gina del repositorio.","title":"Paso 3"},{"location":"Paso3/#creacion-de-repositorio-para-el-proyecto","text":"Como siguiente paso deberas crear un repositorio para el proyecto","title":"Creacion de repositorio para el proyecto"},{"location":"Paso3/#para-crear-un-repositorio-en-tu-organizacion-de-github-sigue-estos-pasos","text":"Inicia sesi\u00f3n en tu cuenta de GitHub y accede a la p\u00e1gina principal de tu organizaci\u00f3n. Haz clic en la pesta\u00f1a \"Repositories\" (repositorios) en la parte superior de la p\u00e1gina. Haz clic en el bot\u00f3n \"New\" (nuevo) en la esquina superior derecha de la p\u00e1gina. En la p\u00e1gina \"Create a new repository\", ingresa un nombre para el repositorio en el campo \"Repository name\". Opcionalmente, puedes agregar una descripci\u00f3n del repositorio en el campo \"Description\". Selecciona la visibilidad del repositorio: p\u00fablico o privado. Si el repositorio es p\u00fablico, cualquiera puede verlo y clonarlo. Si el repositorio es privado, solo los miembros de la organizaci\u00f3n pueden verlo y clonarlo. En este caso selecciona Privado. Selecciona la opci\u00f3n \"Initialize this repository with a README\" si deseas que se cree un archivo README.md en el repositorio. Haz clic en el bot\u00f3n \"Create repository\" para crear el repositorio. \u00a1Eso es todo! Ahora has creado un nuevo repositorio en tu organizaci\u00f3n de GitHub. Puedes agregar archivos al repositorio, colaborar con otros miembros de la organizaci\u00f3n y administrar el acceso al repositorio a trav\u00e9s de la p\u00e1gina del repositorio.","title":"Para crear un repositorio en tu organizaci\u00f3n de GitHub, sigue estos pasos:"},{"location":"Paso4/","text":"Para agregar a los miembros de tu organizaci\u00f3n a tu repositorio de GitHub, sigue estos pasos: Accede a la p\u00e1gina del repositorio en tu organizaci\u00f3n de GitHub. Haz clic en el bot\u00f3n \"Settings\" (configuraci\u00f3n) en la parte superior derecha de la p\u00e1gina. Haz clic en la pesta\u00f1a \"Collaborators and Teams\" (administrar acceso) en el lado izquierdo de la p\u00e1gina. Haz clic en el bot\u00f3n \"Add people\" (invitar personas) en la parte inferior de la p\u00e1gina. Ingresa el nombre de usuario o la direcci\u00f3n de correo electr\u00f3nico del miembro que deseas agregar Selecciona el nivel de acceso que deseas otorgar al miembro: colaborador. Una vez que hayas enviado la invitaci\u00f3n, el miembro recibir\u00e1 un correo electr\u00f3nico con un enlace para aceptar la invitaci\u00f3n y acceder al repositorio. Tambi\u00e9n puedes ver una lista de los miembros actuales y pendientes en la p\u00e1gina \"Manage access\". Recuerda que debes tener permisos de propietario o administrador en el repositorio y la organizaci\u00f3n para agregar miembros.","title":"Paso 4"},{"location":"Paso5/","text":"Crea una Nueva branch de codigo para trabajar con tu nombre Para crear una nueva rama (branch) en Visual Studio Code, sigue estos pasos: Para crear una nueva rama (branch) en Visual Studio Code, sigue estos pasos: Abre Visual Studio Code y abre el proyecto en el que deseas crear una nueva rama. Haz clic en el \u00edcono de \"Source Control\" (control de c\u00f3digo fuente) en la barra lateral izquierda. Haz clic en la secci\u00f3n \"Branches\" (ramas) en la parte superior de la secci\u00f3n de \"Source Control\". Haz clic en el bot\u00f3n \"Create Branch\" (crear rama) en la parte superior de la secci\u00f3n de \"Branches\". Escribe el nombre de la nueva rama en el cuadro de di\u00e1logo que se muestra y presiona Enter. Verifica que la nueva rama se haya creado correctamente en la secci\u00f3n de \"Branches\". Ahora puedes trabajar en la nueva rama y realizar cambios en el proyecto sin afectar la rama principal (master). Recuerda que es importante crear una nueva rama para realizar cambios y luego fusionar los cambios en la rama principal una vez que se hayan probado y aprobado.","title":"Paso 5"},{"location":"Paso5/#crea-una-nueva-branch-de-codigo-para-trabajar-con-tu-nombre","text":"","title":"Crea una Nueva branch de codigo para trabajar con tu nombre"},{"location":"Paso5/#para-crear-una-nueva-rama-branch-en-visual-studio-code-sigue-estos-pasos","text":"Para crear una nueva rama (branch) en Visual Studio Code, sigue estos pasos: Abre Visual Studio Code y abre el proyecto en el que deseas crear una nueva rama. Haz clic en el \u00edcono de \"Source Control\" (control de c\u00f3digo fuente) en la barra lateral izquierda. Haz clic en la secci\u00f3n \"Branches\" (ramas) en la parte superior de la secci\u00f3n de \"Source Control\". Haz clic en el bot\u00f3n \"Create Branch\" (crear rama) en la parte superior de la secci\u00f3n de \"Branches\". Escribe el nombre de la nueva rama en el cuadro de di\u00e1logo que se muestra y presiona Enter. Verifica que la nueva rama se haya creado correctamente en la secci\u00f3n de \"Branches\". Ahora puedes trabajar en la nueva rama y realizar cambios en el proyecto sin afectar la rama principal (master). Recuerda que es importante crear una nueva rama para realizar cambios y luego fusionar los cambios en la rama principal una vez que se hayan probado y aprobado.","title":"Para crear una nueva rama (branch) en Visual Studio Code, sigue estos pasos:"},{"location":"Paso6/","text":"Crea una API en spring boot Para crear una API REST Hello World usando Spring Boot Initializer, sigue estos pasos: Ve al sitio web de Spring Initializr en https://start.spring.io/ En la secci\u00f3n \"Project\", selecciona \"Gradle Project\" seg\u00fan tu preferencia. En la secci\u00f3n \"Language\", selecciona \"Java\" como lenguaje de programaci\u00f3n. En la secci\u00f3n \"Packaging\", elige \"Jar\". En la secci\u00f3n \"Dependencies\", busca y selecciona \"Spring Web\". En la version de Java selecciona 8 Haz clic en el bot\u00f3n \"Generate\" para descargar el archivo ZIP del proyecto. Descomprime el archivo ZIP y copia el contenido dentro del folder de tu repositorio. Para hacer un commit y un push a tu repositorio en Visual Studio Code, sigue estos pasos: Abre el proyecto en Visual Studio Code. Abre la secci\u00f3n de \"Source Control\" haciendo clic en el icono correspondiente en la barra lateral izquierda. Haz clic en la secci\u00f3n \"Changes\" para ver los cambios que has realizado en tu proyecto. Agrega los cambios que deseas confirmar haciendo clic en el signo \"+\" junto a cada archivo modificado o a\u00f1adido. Tambi\u00e9n puedes hacer clic en el bot\u00f3n \"+ All\" para agregar todos los cambios. Escribe un mensaje descriptivo del commit en el cuadro de texto \"Message\" en la parte superior de la secci\u00f3n \"Changes\". Haz clic en el bot\u00f3n \"\u2713\" para hacer el commit. Ahora, para hacer un push, haz clic en el bot\u00f3n \"...\" en la secci\u00f3n \"Changes\" y selecciona \"Push\" en el men\u00fa desplegable. Si es necesario, ingresa tus credenciales de GitHub o de otra plataforma de alojamiento de repositorios. Espera a que se complete el proceso de push.","title":"Paso 6"},{"location":"Paso6/#crea-una-api-en-spring-boot","text":"","title":"Crea una API en spring boot"},{"location":"Paso6/#para-crear-una-api-rest-hello-world-usando-spring-boot-initializer-sigue-estos-pasos","text":"Ve al sitio web de Spring Initializr en https://start.spring.io/ En la secci\u00f3n \"Project\", selecciona \"Gradle Project\" seg\u00fan tu preferencia. En la secci\u00f3n \"Language\", selecciona \"Java\" como lenguaje de programaci\u00f3n. En la secci\u00f3n \"Packaging\", elige \"Jar\". En la secci\u00f3n \"Dependencies\", busca y selecciona \"Spring Web\". En la version de Java selecciona 8 Haz clic en el bot\u00f3n \"Generate\" para descargar el archivo ZIP del proyecto. Descomprime el archivo ZIP y copia el contenido dentro del folder de tu repositorio.","title":"Para crear una API REST Hello World usando Spring Boot Initializer, sigue estos pasos:"},{"location":"Paso6/#para-hacer-un-commit-y-un-push-a-tu-repositorio-en-visual-studio-code-sigue-estos-pasos","text":"Abre el proyecto en Visual Studio Code. Abre la secci\u00f3n de \"Source Control\" haciendo clic en el icono correspondiente en la barra lateral izquierda. Haz clic en la secci\u00f3n \"Changes\" para ver los cambios que has realizado en tu proyecto. Agrega los cambios que deseas confirmar haciendo clic en el signo \"+\" junto a cada archivo modificado o a\u00f1adido. Tambi\u00e9n puedes hacer clic en el bot\u00f3n \"+ All\" para agregar todos los cambios. Escribe un mensaje descriptivo del commit en el cuadro de texto \"Message\" en la parte superior de la secci\u00f3n \"Changes\". Haz clic en el bot\u00f3n \"\u2713\" para hacer el commit. Ahora, para hacer un push, haz clic en el bot\u00f3n \"...\" en la secci\u00f3n \"Changes\" y selecciona \"Push\" en el men\u00fa desplegable. Si es necesario, ingresa tus credenciales de GitHub o de otra plataforma de alojamiento de repositorios. Espera a que se complete el proceso de push.","title":"Para hacer un commit y un push a tu repositorio en Visual Studio Code, sigue estos pasos:"},{"location":"Paso7/","text":"Para clonar un repositorio utilizando HTTPS desde GitHub, sigue estos pasos: Ve al repositorio que deseas clonar en GitHub. Haz clic en el bot\u00f3n \"Code\" (c\u00f3digo) que se encuentra arriba de la lista de archivos del repositorio. Selecciona \"HTTPS\" como opci\u00f3n de clonaci\u00f3n. Copia la URL HTTPS que se muestra. Abre la terminal en tu sistema local. Navega hasta la ubicaci\u00f3n en la que deseas clonar el repositorio. Escribe el siguiente comando para clonar el repositorio: git clone [URL HTTPS del repositorio] Por ejemplo: git clone https://github.com/tu-usuario/tu-repositorio.git Presiona Enter para ejecutar el comando. El repositorio se clonar\u00e1 en tu sistema local. Si el repositorio es privado, se te pedir\u00e1 que ingreses tus credenciales de GitHub para autenticarte antes de que se te permita clonarlo. Abre el repositorio usando vscode En la terminal navega al directorio del repositorio con el comando cd <nombre del repositorio> Escribe el siguiente comando para abrir visual studio code code .","title":"Paso 7"},{"location":"Paso7/#para-clonar-un-repositorio-utilizando-https-desde-github-sigue-estos-pasos","text":"Ve al repositorio que deseas clonar en GitHub. Haz clic en el bot\u00f3n \"Code\" (c\u00f3digo) que se encuentra arriba de la lista de archivos del repositorio. Selecciona \"HTTPS\" como opci\u00f3n de clonaci\u00f3n. Copia la URL HTTPS que se muestra. Abre la terminal en tu sistema local. Navega hasta la ubicaci\u00f3n en la que deseas clonar el repositorio. Escribe el siguiente comando para clonar el repositorio: git clone [URL HTTPS del repositorio] Por ejemplo: git clone https://github.com/tu-usuario/tu-repositorio.git Presiona Enter para ejecutar el comando. El repositorio se clonar\u00e1 en tu sistema local. Si el repositorio es privado, se te pedir\u00e1 que ingreses tus credenciales de GitHub para autenticarte antes de que se te permita clonarlo.","title":"Para clonar un repositorio utilizando HTTPS desde GitHub, sigue estos pasos:"},{"location":"Paso7/#abre-el-repositorio-usando-vscode","text":"En la terminal navega al directorio del repositorio con el comando cd <nombre del repositorio> Escribe el siguiente comando para abrir visual studio code code .","title":"Abre el repositorio usando vscode"},{"location":"Paso8/","text":"Crea una Nueva branch de codigo para trabajar con tu nombre Para crear una nueva rama (branch) en Visual Studio Code, sigue estos pasos: Para crear una nueva rama (branch) en Visual Studio Code, sigue estos pasos: Abre Visual Studio Code y abre el proyecto en el que deseas crear una nueva rama. Haz clic en el \u00edcono de \"Source Control\" (control de c\u00f3digo fuente) en la barra lateral izquierda. Haz clic en la secci\u00f3n \"Branches\" (ramas) en la parte superior de la secci\u00f3n de \"Source Control\". Haz clic en el bot\u00f3n \"Create Branch\" (crear rama) en la parte superior de la secci\u00f3n de \"Branches\". Escribe el nombre de la nueva rama en el cuadro de di\u00e1logo que se muestra y presiona Enter. Verifica que la nueva rama se haya creado correctamente en la secci\u00f3n de \"Branches\". Ahora puedes trabajar en la nueva rama y realizar cambios en el proyecto sin afectar la rama principal (master). Recuerda que es importante crear una nueva rama para realizar cambios y luego fusionar los cambios en la rama principal una vez que se hayan probado y aprobado.","title":"Paso 8"},{"location":"Paso8/#crea-una-nueva-branch-de-codigo-para-trabajar-con-tu-nombre","text":"","title":"Crea una Nueva branch de codigo para trabajar con tu nombre"},{"location":"Paso8/#para-crear-una-nueva-rama-branch-en-visual-studio-code-sigue-estos-pasos","text":"Para crear una nueva rama (branch) en Visual Studio Code, sigue estos pasos: Abre Visual Studio Code y abre el proyecto en el que deseas crear una nueva rama. Haz clic en el \u00edcono de \"Source Control\" (control de c\u00f3digo fuente) en la barra lateral izquierda. Haz clic en la secci\u00f3n \"Branches\" (ramas) en la parte superior de la secci\u00f3n de \"Source Control\". Haz clic en el bot\u00f3n \"Create Branch\" (crear rama) en la parte superior de la secci\u00f3n de \"Branches\". Escribe el nombre de la nueva rama en el cuadro de di\u00e1logo que se muestra y presiona Enter. Verifica que la nueva rama se haya creado correctamente en la secci\u00f3n de \"Branches\". Ahora puedes trabajar en la nueva rama y realizar cambios en el proyecto sin afectar la rama principal (master). Recuerda que es importante crear una nueva rama para realizar cambios y luego fusionar los cambios en la rama principal una vez que se hayan probado y aprobado.","title":"Para crear una nueva rama (branch) en Visual Studio Code, sigue estos pasos:"},{"location":"Paso9/","text":"Para crear un token de GitHub para crear releases y luego guardarlo como un secreto de Actions, sigue estos pasos: Ve a la p\u00e1gina de configuraci\u00f3n de tu cuenta de GitHub y haz clic en \"Developer settings\". En la barra lateral izquierda, haz clic en \"Personal access tokens\". Haz clic en \"Generate new token\". Escribe un nombre descriptivo para el token en \"Note\". Seleccione los permisos necesarios para crear releases. En este caso, debes seleccionar al menos \"repo\". Haz clic en \"Generate token\". Copia el token generado. Este es el \u00fanico momento en el que podr\u00e1s ver el token completo, por lo que aseg\u00farate de guardarlo en un lugar seguro. Vuelve a tu repositorio en GitHub y haz clic en la pesta\u00f1a \"Settings\". En la barra lateral izquierda, haz clic en \"Secrets\". Haz clic en \"New secret\". Escribe un nombre descriptivo para el secreto en \"Name\". Por ejemplo, \"GITHUB_TOKEN\". Pega el token que copiaste anteriormente en \"Value\". Haz clic en \"Add secret\". El secreto se guardar\u00e1 y se podr\u00e1 utilizar en tus acciones de GitHub como ${{ secrets.GITHUB_TOKEN }} . Ahora, puedes utilizar este secreto en tus acciones de GitHub para crear releases sin tener que incluir el token directamente en el archivo de acci\u00f3n. Construir Github action Para crear un GitHub Action que construya una release de un archivo jar usando Gradle y Spring Boot, puedes seguir los siguientes pasos: Crea un archivo de flujo de trabajo de GitHub Actions en tu repositorio. Puedes hacer esto haciendo clic en la pesta\u00f1a \"Acciones\" en tu repositorio y luego haciendo clic en el bot\u00f3n \"Nuevo flujo de trabajo\". Dale un nombre descriptivo a tu flujo de trabajo y guarda el archivo como build.yml en la carpeta .github/workflows/ de tu repositorio. Define las propiedades b\u00e1sicas del flujo de trabajo, como la versi\u00f3n de la plataforma de ejecuci\u00f3n y el evento que activar\u00e1 el flujo de trabajo. Por ejemplo, si quieres activar el flujo de trabajo cuando se empuja una nueva versi\u00f3n de c\u00f3digo a la rama principal ( main ), puedes usar lo siguiente: name: Crear Release de Jar on: push: branches: [ main ] Define los trabajos que se ejecutar\u00e1n en el flujo de trabajo. Puedes definir uno o m\u00e1s trabajos, seg\u00fan sea necesario. Por ejemplo, si solo necesitas construir el archivo jar, puedes definir un trabajo como este: jobs: build: name: Build runs-on: ubuntu-latest steps: - name: Checkout repository uses: actions/checkout@v3 - name: Set up Java uses: actions/setup-java@v3 with: java-version: '17' distribution: 'corretto' - name: Build with Maven run: mvn clean package El primer paso ( actions/checkout@v2 ) clona tu repositorio en la m\u00e1quina virtual que se ejecuta el flujo de trabajo. El segundo paso ( Build Jar ) ejecuta el comando ./gradlew bootJar que construir\u00e1 el archivo jar y lo colocar\u00e1 en el directorio build/libs del proyecto. Si quieres agregar la acci\u00f3n para que tambi\u00e9n cree una release, puedes agregar otro paso que use el comando create-release de la API de GitHub. Por ejemplo: - name: Release JAR id: release uses: elgohr/Github-Release-Action@v4 env: GITHUB_TOKEN: <<Token>> with: title: ${{ github.sha }} El paso create-release crea una nueva release en GitHub y upload-artifact sube el archivo jar generado por Gradle en el paso anterior. Aseg\u00farate de agregar el token de acceso a GitHub ( GITHUB_TOKEN ) como una variable de entorno. Puedes hacer esto en la secci\u00f3n \"Secretos\" de tu repositorio. Una vez que hayas guardado el archivo de flujo de trabajo en tu repositorio, el flujo de trabajo se ejecutar\u00e1 autom\u00e1ticamente cuando se empuje una nueva versi\u00f3n de c\u00f3digo a la rama principal ( main ). La acci\u00f3n construir\u00e1 el archivo jar y lo colocar\u00e1 en el directorio build/libs , y tambi\u00e9n crear\u00e1 una nueva release en GitHub y cargar\u00e1 el archivo jar como un artefacto. Para hacer un commit y un push a tu repositorio en Visual Studio Code, sigue estos pasos: Abre el proyecto en Visual Studio Code. Abre la secci\u00f3n de \"Source Control\" haciendo clic en el icono correspondiente en la barra lateral izquierda. Haz clic en la secci\u00f3n \"Changes\" para ver los cambios que has realizado en tu proyecto. Agrega los cambios que deseas confirmar haciendo clic en el signo \"+\" junto a cada archivo modificado o a\u00f1adido. Tambi\u00e9n puedes hacer clic en el bot\u00f3n \"+ All\" para agregar todos los cambios. Escribe un mensaje descriptivo del commit en el cuadro de texto \"Message\" en la parte superior de la secci\u00f3n \"Changes\". Haz clic en el bot\u00f3n \"\u2713\" para hacer el commit. Ahora, para hacer un push, haz clic en el bot\u00f3n \"...\" en la secci\u00f3n \"Changes\" y selecciona \"Push\" en el men\u00fa desplegable. Si es necesario, ingresa tus credenciales de GitHub o de otra plataforma de alojamiento de repositorios. Espera a que se complete el proceso de push.","title":"Paso 9"},{"location":"Paso9/#construir-github-action","text":"Para crear un GitHub Action que construya una release de un archivo jar usando Gradle y Spring Boot, puedes seguir los siguientes pasos: Crea un archivo de flujo de trabajo de GitHub Actions en tu repositorio. Puedes hacer esto haciendo clic en la pesta\u00f1a \"Acciones\" en tu repositorio y luego haciendo clic en el bot\u00f3n \"Nuevo flujo de trabajo\". Dale un nombre descriptivo a tu flujo de trabajo y guarda el archivo como build.yml en la carpeta .github/workflows/ de tu repositorio. Define las propiedades b\u00e1sicas del flujo de trabajo, como la versi\u00f3n de la plataforma de ejecuci\u00f3n y el evento que activar\u00e1 el flujo de trabajo. Por ejemplo, si quieres activar el flujo de trabajo cuando se empuja una nueva versi\u00f3n de c\u00f3digo a la rama principal ( main ), puedes usar lo siguiente: name: Crear Release de Jar on: push: branches: [ main ] Define los trabajos que se ejecutar\u00e1n en el flujo de trabajo. Puedes definir uno o m\u00e1s trabajos, seg\u00fan sea necesario. Por ejemplo, si solo necesitas construir el archivo jar, puedes definir un trabajo como este: jobs: build: name: Build runs-on: ubuntu-latest steps: - name: Checkout repository uses: actions/checkout@v3 - name: Set up Java uses: actions/setup-java@v3 with: java-version: '17' distribution: 'corretto' - name: Build with Maven run: mvn clean package El primer paso ( actions/checkout@v2 ) clona tu repositorio en la m\u00e1quina virtual que se ejecuta el flujo de trabajo. El segundo paso ( Build Jar ) ejecuta el comando ./gradlew bootJar que construir\u00e1 el archivo jar y lo colocar\u00e1 en el directorio build/libs del proyecto. Si quieres agregar la acci\u00f3n para que tambi\u00e9n cree una release, puedes agregar otro paso que use el comando create-release de la API de GitHub. Por ejemplo: - name: Release JAR id: release uses: elgohr/Github-Release-Action@v4 env: GITHUB_TOKEN: <<Token>> with: title: ${{ github.sha }} El paso create-release crea una nueva release en GitHub y upload-artifact sube el archivo jar generado por Gradle en el paso anterior. Aseg\u00farate de agregar el token de acceso a GitHub ( GITHUB_TOKEN ) como una variable de entorno. Puedes hacer esto en la secci\u00f3n \"Secretos\" de tu repositorio. Una vez que hayas guardado el archivo de flujo de trabajo en tu repositorio, el flujo de trabajo se ejecutar\u00e1 autom\u00e1ticamente cuando se empuje una nueva versi\u00f3n de c\u00f3digo a la rama principal ( main ). La acci\u00f3n construir\u00e1 el archivo jar y lo colocar\u00e1 en el directorio build/libs , y tambi\u00e9n crear\u00e1 una nueva release en GitHub y cargar\u00e1 el archivo jar como un artefacto.","title":"Construir Github action"},{"location":"Paso9/#para-hacer-un-commit-y-un-push-a-tu-repositorio-en-visual-studio-code-sigue-estos-pasos","text":"Abre el proyecto en Visual Studio Code. Abre la secci\u00f3n de \"Source Control\" haciendo clic en el icono correspondiente en la barra lateral izquierda. Haz clic en la secci\u00f3n \"Changes\" para ver los cambios que has realizado en tu proyecto. Agrega los cambios que deseas confirmar haciendo clic en el signo \"+\" junto a cada archivo modificado o a\u00f1adido. Tambi\u00e9n puedes hacer clic en el bot\u00f3n \"+ All\" para agregar todos los cambios. Escribe un mensaje descriptivo del commit en el cuadro de texto \"Message\" en la parte superior de la secci\u00f3n \"Changes\". Haz clic en el bot\u00f3n \"\u2713\" para hacer el commit. Ahora, para hacer un push, haz clic en el bot\u00f3n \"...\" en la secci\u00f3n \"Changes\" y selecciona \"Push\" en el men\u00fa desplegable. Si es necesario, ingresa tus credenciales de GitHub o de otra plataforma de alojamiento de repositorios. Espera a que se complete el proceso de push.","title":"Para hacer un commit y un push a tu repositorio en Visual Studio Code, sigue estos pasos:"}]}